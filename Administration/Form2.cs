using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.IO;

namespace Administration {
    public partial class Form2 : Form {
        public Form2() {
            InitializeComponent();
        }

        private void RadioButton1_CheckedChanged(object sender, EventArgs e) {
            textBox1.Visible = true;
            panel1.Visible = false;
        }

        private void RadioButton2_CheckedChanged(object sender, EventArgs e) {
            panel1.Visible = true;
            textBox1.Visible = false;
        }

        private void Button1_Click(object sender, EventArgs e) {
            byte[] signature = { 0 };
            if(radioButton1.Checked) {
                string name = textBox4.Text;
                if(name.Length > 255) {
                    MessageBox.Show("Максимальная длина имени 255 символов");
                    return;
                }
                Byte nameLength = (Byte)name.Length;
                string[] code = textBox1.Text.Split(' ');
                byte[] bytes = Array.ConvertAll(code, str => Convert.ToByte(str, 16));
                if(bytes.Length > 255) {
                    MessageBox.Show("Максимальная длина кода 255 символов");
                    return;
                }
                Byte[] length = { (Byte)bytes.Length };
                SHA256 sha256Hash = SHA256.Create();
                byte[] hash = sha256Hash.ComputeHash(bytes, 0, length[0]).ToArray();
                if(numericUpDown1.Value > 18446744073709551615 || numericUpDown2.Value > 18446744073709551615) {
                    MessageBox.Show("Значения интервала до 18 446 744 073 709 551 615");
                    return;
                }
                if(numericUpDown1.Value > numericUpDown2.Value) {
                    MessageBox.Show("Начало интервала должно быть меньше конца");
                    return;
                }
                UInt64 begin = Decimal.ToUInt64(numericUpDown1.Value);
                UInt64 end = Decimal.ToUInt64(numericUpDown2.Value);
                signature[0] = nameLength;



                signature = signature.Concat(Encoding.ASCII.GetBytes(name)).Concat(bytes.Take(8)).Concat(length).Concat(hash).Concat(BitConverter.GetBytes(begin)).Concat(BitConverter.GetBytes(end)).ToArray();

                StringBuilder hex = new StringBuilder(signature.Length * 3);
                foreach(byte b in signature)
                    hex.AppendFormat("{0:x2} ", b);
                MessageBox.Show(hex.ToString());
            }
            if(radioButton2.Checked) {
                string name = textBox4.Text;
                if(name.Length > 255) {
                    MessageBox.Show("Максимальная длина имени 255 символов");
                    return;
                }
                Byte nameLength = (Byte)name.Length;
                string[] code = textBox2.Text.Split(' ');
                byte[] bytes = Array.ConvertAll(code, str => Convert.ToByte(str, 16));
                if(numericUpDown3.Value > 255) {
                    MessageBox.Show("Максимальная длина кода 255 символов");
                    return;
                }
                Byte[] length = { (byte)numericUpDown3.Value };
                string hex = textBox3.Text;
                byte[] hash = Enumerable.Range(0, hex.Length).Where(x => x % 2 == 0).Select(x => Convert.ToByte(hex.Substring(x, 2), 16)).ToArray();
                if(numericUpDown1.Value > 18446744073709551615 || numericUpDown2.Value > 18446744073709551615) {
                    MessageBox.Show("Значения интервала до 18 446 744 073 709 551 615");
                    return;
                }
                if(numericUpDown1.Value > numericUpDown2.Value) {
                    MessageBox.Show("Начало интервала должно быть меньше конца");
                    return;
                }
                UInt64 begin = Decimal.ToUInt64(numericUpDown1.Value);
                UInt64 end = Decimal.ToUInt64(numericUpDown2.Value);
                signature[0] = nameLength;

                signature = signature.Concat(Encoding.ASCII.GetBytes(name)).Concat(bytes.Take(8).Reverse()).Concat(length).Concat(hash).Concat(BitConverter.GetBytes(begin)).Concat(BitConverter.GetBytes(end)).ToArray();

                StringBuilder hexb = new StringBuilder(signature.Length * 3);
                foreach(byte b in signature)
                    hexb.AppendFormat("{0:x2} ", b);
                MessageBox.Show(hexb.ToString());
            }
            FileStream fileStream = File.Open(Form1.filePath, FileMode.Open);
            fileStream.Seek(0, SeekOrigin.End);
            fileStream.Write(signature, 0, signature.Length);
            fileStream.Close();
        }
    }
}
