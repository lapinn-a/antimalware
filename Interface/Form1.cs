using Shell32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Interface {
    public partial class Form1 : Form {
        private static NamedPipeClientStream client;
        private static StreamReader reader;
        private static StreamWriter writer;
        public static Shell shell = new Shell();
        public static Folder RecyclingBin = shell.NameSpace(10);

        public Form1() {
            InitializeComponent();
        }
        public void ThreadProc() {
            string temp;
            do {
                Console.WriteLine("begin");
                //Thread.Sleep(5000);
                temp = reader.ReadLine();
                
                Console.WriteLine(temp);
                if(temp.Contains('?')) {
                    var spl = temp.Split('?');
                    Console.WriteLine("File: {0} Status: {1}", spl[0].Replace("\\\\", "\\"), spl[1]);

                    dataGridView2.Invoke((MethodInvoker)delegate {
                        // Running on the UI thread
                        dataGridView2.Rows.Add(spl[0].Replace("\\\\", "\\"), spl[1], "Удалить", "Карантин");
                    });
                    // Back on the worker thread
                }
            } while(true);
            //Console.WriteLine("ok");
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e) {
            Application.Exit();
        }

        private void Button1_Click(object sender, EventArgs e) {
            dataGridView2.Rows.Clear();
            for(int i = 0; i < dataGridView1.Rows.Count - 1; i++) {
                if(((string)dataGridView1.Rows[i].Cells[0].Value).Length != 0) {
                    string input = "SCAN" + dataGridView1.Rows[i].Cells[0].Value + char.MinValue;
                    Console.WriteLine(input);
                    writer.WriteLine(input);
                    writer.Flush();
                    Thread.Sleep(500);
                }
            }
        }

        private void Form1_Load(object sender, EventArgs e) {
            client = new NamedPipeClientStream(".", "MTUCI_Antimalware_pipe", PipeDirection.InOut, PipeOptions.Asynchronous);
            client.Connect(5000);
            reader = new StreamReader(client);
            writer = new StreamWriter(client);
            Thread t = new Thread(ThreadProc);
            t.IsBackground = true;
            t.Start();
        }

        private void RadioButton1_CheckedChanged(object sender, EventArgs e) {
            tabControl1.SelectTab(0);
        }

        private void RadioButton2_CheckedChanged(object sender, EventArgs e) {
            tabControl1.SelectTab(1);
        }

        private void Button2_Click(object sender, EventArgs e) {
            openFileDialog1.ValidateNames = true;
            openFileDialog1.CheckFileExists = true;
            openFileDialog1.CheckPathExists = true;
            // Always default to Folder Selection.
            openFileDialog1.FileName = "";
            if(openFileDialog1.ShowDialog() == DialogResult.OK) {
                //Get the path of specified file
                var filePath = openFileDialog1.FileName;
                DataGridViewRow row = (DataGridViewRow)dataGridView1.Rows[0].Clone();
                row.Cells[0].Value = filePath;
                dataGridView1.Rows.Add(row);
            }
        }

        private void Button3_Click(object sender, EventArgs e) {
            openFileDialog1.ValidateNames = false;
            openFileDialog1.CheckFileExists = false;
            openFileDialog1.CheckPathExists = true;
            // Always default to Folder Selection.
            openFileDialog1.FileName = "Select folder";
            if(openFileDialog1.ShowDialog() == DialogResult.OK) {
                //Get the path of specified file
                var filePath = Path.GetDirectoryName(openFileDialog1.FileName);
                DataGridViewRow row = (DataGridViewRow)dataGridView1.Rows[0].Clone();
                row.Cells[0].Value = filePath;
                dataGridView1.Rows.Add(row);
            }
        }

        private void DataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e) {
            var senderGrid = (DataGridView)sender;

            if(senderGrid.Columns[e.ColumnIndex] is DataGridViewButtonColumn && e.RowIndex >= 0) {
                if(e.ColumnIndex == 2) { // удалить
                    string fileName = senderGrid.Rows[e.RowIndex].Cells[0].Value.ToString();
                    //RecyclingBin.MoveHere(fileName);
                    string input = "REMV" + senderGrid.Rows[e.RowIndex].Cells[0].Value + char.MinValue + char.MinValue;
                    Console.WriteLine(input);
                    writer.WriteLine(input);
                    writer.Flush();
                    senderGrid.Rows.RemoveAt(e.RowIndex);
                }

                if(e.ColumnIndex == 3) { // карантин
                    string fileName = senderGrid.Rows[e.RowIndex].Cells[0].Value.ToString();
                    //RecyclingBin.MoveHere(fileName);
                    string input = "QUAR" + senderGrid.Rows[e.RowIndex].Cells[0].Value + char.MinValue + char.MinValue;
                    Console.WriteLine(input);
                    writer.WriteLine(input);
                    writer.Flush();
                    senderGrid.Rows.RemoveAt(e.RowIndex);
                }
            }
        }

        private void RadioButton3_CheckedChanged(object sender, EventArgs e) {
            string[] drives = Directory.GetLogicalDrives();
            dataGridView3.Rows.Clear();
            dataGridView3.Refresh();
            for(int i = 0; i < drives.Length; i++) {
                dataGridView3.Rows.Add(0, drives[i]);
            }
            tabControl1.SelectTab(2);
        }

        private void RadioButton4_CheckedChanged(object sender, EventArgs e) {
            tabControl1.SelectTab(3);
            dataGridView4.Rows.Clear();
            string fileName = @"monitoring.dat";

            string text = File.ReadAllText(fileName, System.Text.Encoding.Unicode);
            string[] lines = text.Split('\n');

            for(int i = 0; i < lines.Length; i++) {
                if(lines[i].Length > 1) {
                    dataGridView4.Rows.Add(lines[i]);
                }
            }
        }

        private void Button5_Click(object sender, EventArgs e) {
            dataGridView2.Rows.Clear();
            for(int i = 0; i < dataGridView3.Rows.Count; i++) {
                if(((string)dataGridView3.Rows[i].Cells[1].Value).Length != 0) {
                    string input = "SCAN" + dataGridView3.Rows[i].Cells[1].Value + char.MinValue;
                    Console.WriteLine(input);
                    writer.WriteLine(input);
                    writer.Flush();
                    Thread.Sleep(1000);
                }
            }
        }

        private void Button4_Click(object sender, EventArgs e) {
            dataGridView2.Rows.Clear();
            for(int i = 0; i < dataGridView3.Rows.Count; i++) {
                if(((string)dataGridView3.Rows[i].Cells[1].Value).Length != 0 && Convert.ToBoolean(dataGridView3.Rows[i].Cells[0].Value)) {
                    string input = "SCAN" + dataGridView3.Rows[i].Cells[1].Value + char.MinValue;
                    Console.WriteLine(input);
                    writer.WriteLine(input);
                    writer.Flush();
                    Thread.Sleep(500);
                }
            }
        }

        private void Button6_Click(object sender, EventArgs e) {
            string input = "SUSP" + char.MinValue;
            Console.WriteLine(input);
            writer.WriteLine(input);
            writer.Flush();
        }

        private void Button7_Click(object sender, EventArgs e) {
            string input = "STOP" + char.MinValue;
            Console.WriteLine(input);
            writer.WriteLine(input);
            writer.Flush();
        }

        private void Button8_Click(object sender, EventArgs e) {
            string input = "CONT" + char.MinValue;
            Console.WriteLine(input);
            writer.WriteLine(input);
            writer.Flush();
        }

        private void Button9_Click(object sender, EventArgs e) {
            string input = "REST" + "F:\\Новая папка\\fsnotifier.exe" + char.MinValue;
            Console.WriteLine(input);
            writer.WriteLine(input);
            writer.Flush();
        }

        private void Button10_Click(object sender, EventArgs e) {
            openFileDialog1.ValidateNames = false;
            openFileDialog1.CheckFileExists = false;
            openFileDialog1.CheckPathExists = true;
            // Always default to Folder Selection.
            openFileDialog1.FileName = "Select folder";
            if(openFileDialog1.ShowDialog() == DialogResult.OK) {
                //Get the path of specified file
                var filePath = Path.GetDirectoryName(openFileDialog1.FileName);
                DataGridViewRow row = (DataGridViewRow)dataGridView4.Rows[0].Clone();
                row.Cells[0].Value = filePath;
                dataGridView4.Rows.Add(row);
                string input = "ADDM" + filePath + char.MinValue;
                Console.WriteLine(input);
                writer.WriteLine(input);
                writer.Flush();
            }
        }

        private void Button11_Click(object sender, EventArgs e) {
            dataGridView4.Rows.Clear();
            string input = "CLRM" + char.MinValue;
            Console.WriteLine(input);
            writer.WriteLine(input);
            writer.Flush();
        }

        private void Button12_Click(object sender, EventArgs e) {
            for(int i = 0; i < dataGridView3.Rows.Count; i++) {
                dataGridView3.Rows[i].Cells[0].Value = true;
            }
        }

        private void Button13_Click(object sender, EventArgs e) {
            dataGridView3.Rows.Clear();
            dataGridView3.Refresh();
            var drives = DriveInfo.GetDrives();
            foreach(var drive in drives) {
                if(drive.DriveType == DriveType.Removable) {
                    Console.WriteLine(drive.Name);
                    dataGridView3.Rows.Add(1, drive.Name);
                } else {
                    Console.WriteLine(drive.Name);
                    dataGridView3.Rows.Add(0, drive.Name);
                }
            }
        }

        private void RadioButton5_CheckedChanged(object sender, EventArgs e) {
            dataGridView5.Rows.Clear();
            tabControl1.SelectTab(4);
            string fileName = @"quarantine.dat";

            string text = File.ReadAllText(fileName, System.Text.Encoding.Unicode);
            string[] lines = text.Split('\n');

            for(int i = 0; i < lines.Length; i++) {
                if(lines[i].Length > 1 && lines[i][0] != 0) {
                    dataGridView5.Rows.Add(lines[i].Replace("\\\\", "\\"), "Удалить", "Вернуть");
                }
            }
        }

        private void DataGridView5_CellContentClick(object sender, DataGridViewCellEventArgs e) {
            var senderGrid = (DataGridView)sender;

            if(senderGrid.Columns[e.ColumnIndex] is DataGridViewButtonColumn && e.RowIndex >= 0) {
                if(e.ColumnIndex == 1) { // удалить
                    string fileName = senderGrid.Rows[e.RowIndex].Cells[0].Value.ToString();
                    //RecyclingBin.MoveHere(fileName);
                    string input = "REMC" + senderGrid.Rows[e.RowIndex].Cells[0].Value + char.MinValue + char.MinValue;
                    senderGrid.Rows.RemoveAt(e.RowIndex);
                    Console.WriteLine(input);
                    writer.WriteLine(input);
                    writer.Flush();
                }

                if(e.ColumnIndex == 2) { // карантин
                    string fileName = senderGrid.Rows[e.RowIndex].Cells[0].Value.ToString();
                    //RecyclingBin.MoveHere(fileName);
                    string input = "REST" + senderGrid.Rows[e.RowIndex].Cells[0].Value + char.MinValue + char.MinValue;
                    senderGrid.Rows.RemoveAt(e.RowIndex);
                    Console.WriteLine(input);
                    writer.WriteLine(input);
                    writer.Flush();
                }
            }
        }

        private void Button14_Click(object sender, EventArgs e) {
            dataGridView5.Rows.Clear();
            string input = "CLRQ" + char.MinValue;
            Console.WriteLine(input);
            writer.WriteLine(input);
            writer.Flush();
        }

        private void RadioButton6_CheckedChanged(object sender, EventArgs e) {
            tabControl1.SelectTab(5);
            dataGridView6.Rows.Clear();
            string fileName = @"schedulePaths.dat";

            string text = File.ReadAllText(fileName, System.Text.Encoding.Unicode);
            string[] lines = text.Split('\n');

            for(int i = 0; i < lines.Length; i++) {
                if(lines[i].Length > 1) {
                    dataGridView6.Rows.Add(lines[i]);
                }
            }
        }

        private void Button16_Click(object sender, EventArgs e) {
            openFileDialog1.ValidateNames = false;
            openFileDialog1.CheckFileExists = false;
            openFileDialog1.CheckPathExists = true;
            // Always default to Folder Selection.
            openFileDialog1.FileName = "Select folder";
            if(openFileDialog1.ShowDialog() == DialogResult.OK) {
                //Get the path of specified file
                var filePath = Path.GetDirectoryName(openFileDialog1.FileName);
                DataGridViewRow row = (DataGridViewRow)dataGridView6.Rows[0].Clone();
                row.Cells[0].Value = filePath;
                dataGridView6.Rows.Add(row);
                string input = "ADDS" + filePath + char.MinValue;
                Console.WriteLine(input);
                writer.WriteLine(input);
                writer.Flush();
            }
        }

        private void Button15_Click(object sender, EventArgs e) {
            dataGridView6.Rows.Clear();
            string input = "CLRS" + char.MinValue;
            Console.WriteLine(input);
            writer.WriteLine(input);
            writer.Flush();
        }

        private void CheckedListBox1_SelectedIndexChanged(object sender, EventArgs e) {
            ushort month = 0;
            for(int i = 0; i < 12; i++) {
                month |= (ushort)((checkedListBox1.GetItemChecked(i) ? 1 : 0) << i);
            }

            uint day = 0;
            for(int i = 0; i < 31; i++) {
                day |= (uint)((checkedListBox2.GetItemChecked(i) ? 1 : 0) << i);
            }

            uint hour = 0;
            for(int i = 0; i < 24; i++) {
                hour |= (uint)((checkedListBox3.GetItemChecked(i) ? 1 : 0) << i);
            }

            byte minute = (byte)numericUpDown1.Value;
            MessageBox.Show(month.ToString() + " " + day.ToString() + " " + hour.ToString() + " " + minute.ToString());
            FileStream fs = new FileStream("schedule.dat", FileMode.Create, FileAccess.Write);
            BinaryWriter bw = new BinaryWriter(fs);
            bw.Write(month);
            bw.Write(day);
            bw.Write(hour);
            bw.Write(minute);
            bw.Close();
        }
    }
}
