#pragma warning (disable : 4996)
#include <windows.h>
#include <vector>
#include <Shlwapi.h>
#include <string>

bool ProcessRemove(HANDLE hPipe, LPTSTR pchRequest, LPDWORD pchBytes) {
	DWORD cbWritten;
	bool fSuccess = true;

	std::vector<const wchar_t*> toRemove;
	toRemove.push_back(pchRequest + 4);

	SHFILEOPSTRUCT fileOp;
	memset(&fileOp, 0, sizeof(SHFILEOPSTRUCT));
	fileOp.hwnd = NULL;
	fileOp.wFunc = FO_DELETE;
	fileOp.pFrom = pchRequest + 4;
	fileOp.pTo = NULL;
	fileOp.fFlags = FOF_ALLOWUNDO;
	int res = SHFileOperation(&fileOp);

	if (res != 0) {
		fSuccess = false;
	} else {
		fSuccess = true;
	}

	const char* fin = "DONE\n";
	fSuccess = WriteFile(
		hPipe,        // handle to pipe 
		fin,     // buffer to write from 
		strlen(fin) * sizeof(char), // number of bytes to write 
		&cbWritten,   // number of bytes written 
		NULL);        // not overlapped I/O
	return fSuccess;
}

bool ProcessQuarantine(HANDLE hPipe, LPTSTR pchRequest, LPDWORD pchBytes) {
	DWORD cbWritten;
	bool fSuccess = true;

	std::vector<const wchar_t*> toRemove;
	toRemove.push_back(pchRequest + 4);

	FILE * fileptr;
	unsigned int count = 0;
	wchar_t chr = 0;

	TCHAR szFile[MAX_PATH];
	GetModuleFileName(NULL, szFile, MAX_PATH);
	PathRemoveFileSpec(szFile);
	wcscat(szFile, L"\\quarantine.dat");

	fileptr = _wfopen(szFile, L"r+b");

	chr = fgetwc(fileptr);
	while (chr != WEOF) {
		if (chr == L'\n') {
			count++;
		}
		chr = fgetwc(fileptr);
	}

	GetModuleFileName(NULL, szFile, MAX_PATH);
	PathRemoveFileSpec(szFile);

	bool res = MoveFileEx(pchRequest + 4, std::wstring(szFile).append(L"\\quarantine\\").append(std::to_wstring(count)).append(L".virus").c_str(), MOVEFILE_COPY_ALLOWED);

	fwrite(pchRequest + 4, wcslen(pchRequest) - 4, sizeof(TCHAR), fileptr);
	fwrite(L"\n", 1, sizeof(TCHAR), fileptr);
	fclose(fileptr);

	fileptr = _wfopen(std::wstring(szFile).append(L"\\quarantine\\").append(std::to_wstring(count)).append(L".virus").c_str(), L"r+b");
	for (int i = 0; i < 60; i++) {
		fseek(fileptr, i, SEEK_SET);
		chr = getc(fileptr);
		fseek(fileptr, i, SEEK_SET);
		fputc(chr ^ 85, fileptr);
	}
	fclose(fileptr);

	const char* fin;
	if (res != 0) {
		fin = "DONE\n";
	} else {
		fin = "FAIL\n";
	}

	fSuccess = WriteFile(
		hPipe,        // handle to pipe 
		fin,     // buffer to write from 
		strlen(fin) * sizeof(char), // number of bytes to write 
		&cbWritten,   // number of bytes written 
		NULL);        // not overlapped I/O
	return fSuccess;
}

bool ProcessRestore(HANDLE hPipe, LPTSTR pchRequest, LPDWORD pchBytes) {
	DWORD cbWritten;
	bool fSuccess = true;

	FILE* fp;
	wchar_t* lptr;
	int len = 0;
	int nlines = 0;

	TCHAR szFile[MAX_PATH];
	GetModuleFileName(NULL, szFile, MAX_PATH);
	PathRemoveFileSpec(szFile);
	wcscat(szFile, L"\\quarantine.dat");

	fp = _wfopen(szFile, L"r+b");

	int posInQuarant = 0;
	wchar_t letters[MAX_PATH];
	int filePos = 0;
	while ((fgetws(letters, MAX_PATH, fp)) != NULL || feof(fp) == 0) {
		len = wcslen(letters);
		letters[len - 1] = L'\0';
		//wcscat(letters, L" ÍÀÉÄÅÍ");
		//const wchar_t* messages = letters;
		//ReportEvent(event_log, EVENTLOG_SUCCESS, 0, 0, NULL, 1, 0, &messages, NULL);

		//messages = pchRequest + 4;
		//ReportEvent(event_log, EVENTLOG_SUCCESS, 0, 0, NULL, 1, 0, &messages, NULL);
		if (wcscmp(pchRequest + 4, letters) == 0) {

			fseek(fp, filePos, SEEK_SET);
			fputwc(L'\0', fp);
			break;
		}
		posInQuarant++;
		filePos = ftell(fp);
	}

	//const wchar_t* messages = L"FCLOSE";
	//ReportEvent(event_log, EVENTLOG_SUCCESS, 0, 0, NULL, 1, 0, &messages, NULL);
	fclose(fp);

	if (wcscmp(pchRequest + 4, letters) != 0) {
		return true;
	}

	GetModuleFileName(NULL, szFile, MAX_PATH);
	PathRemoveFileSpec(szFile);

	FILE* fileptr = _wfopen(std::wstring(szFile).append(L"\\quarantine\\").append(std::to_wstring(posInQuarant)).append(L".virus").c_str(), L"r+b");
	for (int i = 0; i < 60; i++) {
		fseek(fileptr, i, SEEK_SET);
		char chr = getc(fileptr);
		fseek(fileptr, i, SEEK_SET);
		fputc(chr ^ 85, fileptr);
	}
	fclose(fileptr);

	//messages = std::wstring(szFile).append(L"\\quarantine\\").append(std::to_wstring(posInQuarant)).append(L".virus").c_str();
	//ReportEvent(event_log, EVENTLOG_SUCCESS, 0, 0, NULL, 1, 0, &messages, NULL);

	bool res = MoveFileEx(std::wstring(szFile).append(L"\\quarantine\\").append(std::to_wstring(posInQuarant)).append(L".virus").c_str(), pchRequest + 4, MOVEFILE_COPY_ALLOWED);

	//const wchar_t* messages = std::wstring(szFile).append(L"\\quarantine\\").append(std::to_wstring(count)).append(L".virus").c_str();
	//ReportEvent(event_log, EVENTLOG_SUCCESS, 0, 0, NULL, 1, 0, &messages, NULL);

	/*fwrite(pchRequest + 4, wcslen(pchRequest) - 4, sizeof(TCHAR), fileptr);
	fwrite(L"\n", 1, sizeof(TCHAR), fileptr);
	fclose(fileptr);*/

	const char* fin;
	if (res != 0) {
		fin = "DONE\n";
	} else {
		fin = "FAIL\n";
	}

	/*fSuccess = WriteFile(
		hPipe,        // handle to pipe
		fin,     // buffer to write from
		strlen(fin) * sizeof(char), // number of bytes to write
		&cbWritten,   // number of bytes written
		NULL);        // not overlapped I/O*/
	return fSuccess;
}