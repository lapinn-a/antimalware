#pragma warning (disable : 4996)

#define WIN32_LEAN_AND_MEAN
#define DEFAULT_BUFLEN 512
// Файлы заголовков Windows
#include <windows.h>
#include <string>

#define SVCNAME TEXT("MTUCI_AntimalwareService")

int installService() {
	SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
	if (!hSCManager) {
		DWORD e = GetLastError();
		if (e == ERROR_ACCESS_DENIED) {
			MessageBoxA(NULL, "access denied", "Error", 0);
		} else {
			MessageBoxA(NULL, std::to_string(GetLastError()).c_str(), "error opening manager", 0);
		}
		return -1;
	}

	TCHAR szFileName[MAX_PATH];
	GetModuleFileName(NULL, szFileName, MAX_PATH);

	SC_HANDLE hService = CreateServiceW(
		hSCManager,
		L"MTUCI_AntimalwareService",
		L"MTUCI_AntimalwareService",
		SERVICE_ALL_ACCESS,
		SERVICE_WIN32_OWN_PROCESS,
		SERVICE_AUTO_START,
		SERVICE_ERROR_NORMAL,
		szFileName,
		NULL, NULL, NULL, NULL, NULL
	);

	if (!hService) {
		CloseServiceHandle(hSCManager);
		DWORD e = GetLastError();
		if (e == ERROR_SERVICE_EXISTS) {
			MessageBoxA(NULL, "service alresdy exists", "Error", 0);
		} else {
			MessageBoxA(NULL, std::to_string(GetLastError()).c_str(), "error installing service", 0);
		}
		return -1;
	}
	CloseServiceHandle(hService);

	CloseServiceHandle(hSCManager);

	HANDLE event_log = RegisterEventSource(NULL, SVCNAME);
	const wchar_t* message = L"Service installed";
	ReportEvent(event_log, EVENTLOG_SUCCESS, 0, 0, NULL, 1, 0, &message, NULL);

	MessageBoxA(NULL, "installed successfully", "Info", 0);
	return 0;
}

int uninstallService() {
	SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
	if (!hSCManager) {
		DWORD e = GetLastError();
		if (e == ERROR_ACCESS_DENIED) {
			MessageBoxA(NULL, "access denied", "Error", 0);
		} else {
			MessageBoxA(NULL, std::to_string(GetLastError()).c_str(), "error opening manager", 0);
		}
		return -1;
	}

	SC_HANDLE hService = OpenServiceW(hSCManager, L"MTUCI_AntimalwareService", SERVICE_STOP | DELETE);

	if (!hService) {
		CloseServiceHandle(hSCManager);
		DWORD e = GetLastError();
		MessageBoxA(NULL, std::to_string(GetLastError()).c_str(), "error removing service", 0);
		return -1;
	}

	DeleteService(hService);
	CloseServiceHandle(hService);
	CloseServiceHandle(hSCManager);
	MessageBoxA(NULL, "removed successfully", "Info", 0);
	return 0;
}

int runService() {
	SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
	SC_HANDLE hService = OpenService(hSCManager, L"MTUCI_AntimalwareService", SERVICE_START);

	if (!StartService(hService, 0, NULL)) {
		CloseServiceHandle(hSCManager);
		MessageBoxA(NULL, std::to_string(GetLastError()).c_str(), "error starting service", 0);
		return -1;
	}

	CloseServiceHandle(hService);
	CloseServiceHandle(hSCManager);
	MessageBoxA(NULL, "started successfully", "Info", 0);
	return 0;
}